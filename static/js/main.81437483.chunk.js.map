{"version":3,"sources":["api/posts.ts","api/api.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["response","BASE_URL","getUserPosts","userId","a","fetch","json","getPostDetails","postId","responsePostDetails","PostsList","userID","setPostId","selectedID","useState","posts","setPosts","onLoad","useEffect","className","map","post","title","type","Class","id","onClick","request","url","options","method","getPostComments","removeComment","commmentId","Loader","NewCommentForm","name","placeholder","PostDetails","postID","setPost","comments","setComments","isShown","setIsShown","body","comment","App","selectedPostID","setID","onChange","value","target","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81437483.chunk.js","sourcesContent":["import { BASE_URL } from './api';\n\nlet response;\n\nexport async function getUserPosts(userId: number | null) {\n  if (!userId) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostDetails(postId: number) {\n  const responsePostDetails = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return responsePostDetails.json();\n}\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useEffect, useState } from 'react';\nimport Class from 'classnames';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ninterface Props {\n  userID: number | null\n  setPostId: (postId: number | null) => void,\n  selectedID: number | null\n}\n\nexport const PostsList: React.FC<Props> = (\n  { userID, setPostId, selectedID },\n) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const onLoad = async (userId: number | null) => {\n    setPosts(await getUserPosts(userId));\n  };\n\n  useEffect(() => {\n    onLoad(userID);\n  }, [userID]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={Class('PostsList__button button',\n                { 'PostsList__button--selected': selectedID === post.id })}\n              onClick={() => {\n                if (selectedID === post.id) {\n                  setPostId(null);\n                } else {\n                  setPostId(post.id);\n                }\n              }}\n            >\n              {selectedID === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nconst request = async (url: string, options = { method: 'GET' }) => {\n  return (await fetch(url, options)).json();\n};\n\nexport async function getPostComments(postId: number) {\n  const response = await request(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response;\n}\n\nexport const removeComment = async (commmentId: number) => {\n  await request(`${BASE_URL}/comments/${commmentId}`, { method: 'DELETE' });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => (\n  <form className=\"NewCommentForm\">\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Your name\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"Your email\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <textarea\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      className=\"NewCommentForm__submit-button button\"\n    >\n      Add a comment\n    </button>\n  </form>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postID: number\n}\n\nexport const PostDetails: React.FC<Props> = ({ postID }) => {\n  const [post, setPost] = useState<Post | null>(null);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const [isShown, setIsShown] = useState<boolean>(true);\n\n  const onLoad = async () => {\n    setPost(await getPostDetails(postID));\n    setComments(await getPostComments(postID));\n  };\n\n  useEffect(() => {\n    onLoad();\n  }, [postID]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      {post ? (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsShown(!isShown)}\n          >\n            {isShown ? 'Hide' : 'Show'}\n          </button>\n\n          {isShown && (\n            <ul className=\"PostDetails__list\">\n              {\n                comments.map(comment => (\n                  <li className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(comment.id);\n                        onLoad();\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))\n              }\n            </ul>\n          )}\n        </section>\n      )\n        : <Loader />}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [selectedPostID, setPostId] = useState<number | null>(null);\n\n  const [userID, setID] = useState<number | null>(null);\n\n  const setter = (value: number) => {\n    if (!value) {\n      setID(null);\n    } else {\n      setID(value);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={({ target }) => setter(Number(target.value))}\n          >\n            <option value={0}>All users</option>\n            <option value={1}>Leanne Graham</option>\n            <option value={2}>Ervin Howell</option>\n            <option value={3}>Clementine Bauch</option>\n            <option value={4}>Patricia Lebsack</option>\n            <option value={5}>Chelsey Dietrich</option>\n            <option value={6}>Mrs. Dennis Schulist</option>\n            <option value={7}>Kurtis Weissnat</option>\n            <option value={8}>Nicholas Runolfsdottir V</option>\n            <option value={9}>Glenna Reichert</option>\n            <option value={10}>Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userID={userID}\n            setPostId={setPostId}\n            selectedID={selectedPostID}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostID\n            ? (\n              <PostDetails\n                postID={selectedPostID}\n              />\n            )\n            : <h1>Nothing selected</h1>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}